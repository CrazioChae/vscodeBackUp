    1. 분산처리 시스템의 개요

    (1)필요성
 + 시스템 자원의 효율적 사용
  - CPU
  - 주변기기
 + 연산 속도 향상
  - 동시 작업
 + 신뢰성 확보
  - 다양한 서비스 제공
 + 대용량 데이터 관리
  - Big Data

    (2)정의
 + 다수의 시스템으로 작업을 분산시켜 처리
 + 네트워크를 통한 작업 분산

    (3)장단점
 + 장점
  - 작업 및 데이터 분산을 통한 시스템 부하 조절
  - 확장 용이
  - 일부 시스템 오류시에도 정상 작동 가능
  - 주변 기기들을 공유하거나 분산할 수 있음
 + 단점
  - 설계의 복잡도 증가
  - SW적 오류 발생 가능성이 높아짐
  - 보안 문제 발생 가능

    (4)구조에 따른 분류
 + 완전 연결(Fully Connection)형 / 망형
  - 각 노드는 모든 다른 노드와 직접 연결
  - 구축 비용이 많이 필요
  - 통신 비용은 적음
  - 신뢰성 높음
  - 사이트 수가 n이면 링크 수는 n(n-1)/2개
 + 계층(Hierarchy)형/트리형
  - 가장 일반적 형태
  - 부모 노드가 고장시 자식 노드들은 통신 불가
 + 스타(Star)형 / 성형
  - 모든 노드가 하나의 중앙 노드에 직접 연결
  - 중앙 노드 고장 시 모든 통신이 단절
 + 링(Ring)형 / 환형
  - 인접 두개 노드만 직접 연결
  - 정보는 단방향 혹은 양방향 이동 가능
  - 데이터가 링을 순환해야 할 경우 통신 비용 증가
  - 노드 추가 시 통신 회선을 단절 후 연결 필요
 + 다중 접근 버스 연결(Multi Access Bus Connection)
  - 하나의 공유 버스에 모든 노드 연결
  - 하나의 노드의 고장은 다른 노드에 영향을 미치지 않음
  - 버스의 오류 시 시스템 고장으로 이어짐
  - 노드의 추가, 삭제가 용이
 + 근거리 통신망(LAN)
  - 회사, 학교 등 가까운 거리의 시스템과 자원을 연결하여 구성
  - 주로 버스형, 링형 구조 사용
  - 자원 공유
  - 데이터 전송 속도가 빠름
  - 오류 발생 가능성 낮음
 + 광대역 통신망(WAN: Wide Area Network)
  - 먼 거리에 있는 시스템들을 연결
  - 통신 속도가 느림
  - 에러 가능성이 높음
  - LAN과 WAN을 혼용
  - 보안 문제 발생 가능성이 높음
 + 투명성 Transparency
  - 위치: 분산된 시스템들의 물리적 위치에 무관
  - 이주: 데이터의 물리적 위치가 최종 사용자에게 중요하지 않음
  - 복제: 내부적 이중화 등에 대해 최종 사용자는 인지할 필요 없음
  - 병행: 자원 공유를 시스템적으로 지원
  - 접근: 사용자 위치와 무관하게 정상적인 접속 가능
  - 성능: 성능 향상 필요시, 자체적으로 시스템 재구성이 이뤄짐
  - 규모: 소프트웨어적 변경 없이 규모 확장이 가능
  - 고장: 특정 시스템 오류에도 정상적 작업 가능성 확보


    2. 분산처리 시스템 활용 예제

    (1)Big Data
 + Data 증가와 서비스 속도 감소 해결 필요성
 + 2025년 전망(International Data Corporation)
  - 175제타 바이트(연 60%이상 증가)
  - 90제타 바이트는 IoT 디바이스에서 생성
  - 49%의 데이터는 public cloud에 저장
  - 데이터의 30%는 실시간으로 소비(처리)


    1. 분산 처리 시스템
연산 및 데이터 관리 분산
데이터 증가와 연산량 증가에 대응
안정적인 서비스를 위한 설계 필요

    2. 분산 처리 시스템 분류 방식
네트워크 구성 방식에 따른 분류
분산 범위에 따른 분류
