    1. 멀티 프로세스와 멀티 스레드

    (1)Multi tasking
 + 자원의 공유를 통한 효율성 
  - 주변 장치의 느린 속도 대처
  - CPU 활용의 최대화

    (2)구분
 + 멀티 프로세싱
  - 운영체제에서 관리
  - 메모리 공간 독립적 사용(배타적)
 + 멀티 스레딩
  - 가상머신이나, 스레드들이 속한 프로세스에서 관리
  - 메모리 공간 공유(프로그래머가 관리)

    (3)비교
 + 멀티 스레딩이 멀티 프로세싱보다 자원 사용이 효율적
 + 멀티 스레딩은 데이터 공유가 멀티 프로세싱보다 편리
  (멀티 프로세싱도 데이터 공유는 가능, 복잡함)
 + 데이터 공유 관리가 필요, 프로그래머가 해결해야 함
  (운영체제가 담당하는 부분을 프로그래머가 구현해야 함)


    2. 프로세스간 통신(Inter-Process Communication IPC)

    (1)프로세스 단위의 Multi tasking의 장 단점
 + 독립된 실행 단위 데이터 영역
 + 데이터 공유의 어려움

    (2)데이터 공유(송수신)
 + 프로세스는 독립된 메모리 공간에서 동작
 + 파일 등의 공유시 파일 접근에 대한 관리가 필요
  (별도 프로세스가 필요할 수 있음)


    3. 프로세스간 통신 종류

    (1)PIPE(반 이중 통신)
 + 읽기 전용 파일 + 쓰기 전용 파일

    (2)Message Queue
 + 메모리 공간 활용
 + 다수의 프로세스가 동시에 데이터 접근 가능

    (3)Shared Memory
 + 메모리 공간 활용
 + 실질적 데이터 공유
 + 빠름
 + 정보의 일관성(consistency) 유지 노력 필요

    (4)Socket
 + TCP/IP 통신 활용
 + 구현은 어렵지만, 데이터 일관성 유지에 좋음
 + 분산 시스템으로 확장 가능

    (5)Common Object Request Broker Architecture(CORBA)
 + 객체 간 메소드 호출을 표준화(객체 지향형)
 + 각 객체의 위치는 로컬과 원격(네트워크 간)에 구애 받지 않음
 + 개발자에 상관없이 상호간 통신을 보장
 + 미들웨어를 통한 통신 방식


    1. 프로세스 간 통신
메모리 독립 사용 프로세스 간의 데이터 공유
PIPE, Shared Memory, Memory Queue 등의 방식이 존재
데이터의 일관성 유지를 위한 노력 필요

    2. CORBA
객체 지향형
이 기종 간의 통신도 가능
원격 프로세스 간의 데이터 교환에도 사용 가능
