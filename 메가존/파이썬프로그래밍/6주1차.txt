    1. 딕셔너리의 이해

    (1)딕셔너리란
 + 파이썬에서 사용되는 자료형
 + 여러 개의 데이터를 한꺼번에 저장하고 처리
 + 키(key):값(value)의 짝을 이룸
 + 키(key)값을 이용해 자료에 접근
 + 쌍 두개가 하나로 묶인 자료구조
 + 다른 프로그래밍 언어에서는 해쉬(Hash), 연관 배열이라 함
 + 중괄호 {}로 묶어 구성


    2. 딕셔너리의 생성과 추가

    (1)딕셔너리의 생성
 + 파이썬의 딕셔너리는 키와 값의 데이터를 매핑하여 저장하는 방식
 + 딕셔너리는 리스트와 마찬가지로 어떤 유형의 값이라도 저장 가능
 + 정수, 문자열, 다른 리스트, 다른 딕셔너리도 항목으로 저장 가능
 + 딕셔너리 생성 예
en_kr = {'cat' : '고양이', 'dog' : '강아지', 'horse' : '말'}
 + 빈 딕셔너리를 생성하고 Key Value 쌍 추가
phone_book = {}
phone_book['홍길동'] = '010-1234-5678'
print(phone_book)
실행결과: {'홍길동': '010-1234-5678'}
 + 딕셔너리 생성과 동시에 초기화 하는법
phone_book = {'홍길동' : '010-1234-5678'}

    (2)딕셔너리 추가
phone_book['홍길동'] = '010-1234-5678'

    (3)딕셔너리 탐색
print(phone_book['홍길동'])
실행결과: 010-1234-5678
 + 모든 키를 보는 함수: .keys()
 + 딕셔너리 출력을 정리 가능
for key in sorted(phone_book.keys())
    print(key, phone_book[key])
 + 딕셔너리에서 사용되는 모든 값 출력: values()


    1. 딕셔너리의 생성 및 사용
*딕셔너리에는 순서가 없어서 생성한 순서대로 구성되어있지 않음

    (1)생성
student1 = {}

    (2)추가
student1['전화번호'] = '010-1234-5678'

    (3)수정
student1['전화번호'] = '010-9876-5432'

    (4)삭제
del(student1['전화번호'])

    (5)키로 값에 접근
.get(키) 함수를 사용
student1.get('전화번호')
> 010-9876-5432


    2. 튜플을 딕셔너리로 변경하기

    (1)튜플 타입의 개념
 + 변경할 수 없는 열거 데이터의 집합
 + 리스트 타입과 달리 값의 수정이 불가능
 + 리스트는 대괄호[]로 생성, 튜플은 소괄호()로 생성
tt1 = (10, 20, 30); tt1
tt2 = (10, 20, 30); tt2
card = 'red', 4, '다이아몬드', True
card[2]

    (3)튜플을 딕셔너리로 변환하기
pro_list = [('Python', 7), ('Java', 2)]
pro_list
pro_dict = dict(pro_list)
type(pro_dict)

1. 딕셔너리

파이썬에서 사용하는 자료형
여러 개의 데이터를 한꺼번에 저장하고 처리
키(key)-값(value)의 짝을 이룸
키(key) 값을 이용하여 자료에 접근
2. 딕셔너리 생성

파이썬의 딕셔너리는 키(key)의 역할을 하는 데이터와 값(value)의 역할을 하는 데이터를 하나씩 매핑(mapping)하여 저장하는 방식
딕셔너리는 리스트와 마찬가지로 어떤 유형의 값도 저장할 수 있음
정수, 문자열, 다른 리스트, 다른 딕셔너리도 항목으로 저장할 수 있음
3. 딕셔너리 탐색과 출력

　1) 딕셔너리 탐색
　　- 키를 아는 경우:
　　　print(딕셔너리이름[키])
　　- 키를 모르는 경우:
　　　print(딕셔너리이름.keys( ))
　2) 딕셔너리 출력
　　- 모든 값 출력:
　　　print(딕셔너리이름.values( ))
　　- 딕셔너리 출력 정리:
　　　for key in sorted(딕셔너리이름.keys( )) :
　　　print(key, 딕셔너리이름[key])
