    1. 파일의 개요

    (1)파일은 왜 필요할까
 + 데이터를 오래 보관하고자 함
 + 보조기억장치에 파일 형태로 데이터를 저장해야 함
 + 사용자가 필요로 하는 데이터를 영구적으로 저장
 + 실행 시 매번 타이핑할 필요가 없음
 + 프로그램 출력을 파일에 저장
 + 방대한 데이터를 다루기 쉬움

    (2)파일 관리 과정
파일 열기 > 데이터 읽기/쓰기 > 파일 닫기


    2. 파일 열기와 닫기

    (1)파일 구조
 + 파일을 열고 닫는 구조는 다음과 같음

    (2)표준 입출력과 파일 입출력
 + 한 번에 파일의 모든 줄을 읽는 함수: read()
 + 파일에서 하나의 줄만 읽어오는 함수: readlines()
 + 파일에 몇 줄의 내용이 들어있는지 확인 불가
 + 파일에 데이터를 쓰려면 write() 함수를 이용
 + split() 함수를 이용해 문자열을 분리


    3. CSV 파일을 사용하기

    (1)CSV 파일의 처리를 위해 CSV 모듈 import


    1. 파일의 개요
데이터를 오래 보관하고자 한다면 하드디스크와 같은 보조기억장치에 파일 형태로 저장해야 함
파일은 데이터를 영구적으로 저장하며, 프로그램을 실행할 때마다 입력 데이터를 매번 타이핑할 필요가 없음
방대한 데이터를 다루기 쉬움
    
    2. 파일 구조
Read mode(“r”): 파일을 처음부터 읽음
Write mode(“w”): 파일을 처음부터 쓰며, 파일이 없으면 생성되지만, 파일이 존재하면 기존 내용은 지워짐
Append mode(“a”): 파일의 끝에 이어서 내용을 쓰며, 파일이 없으면 생성됨
읽기와 쓰기 모드(“r+”): 파일에 읽고 쓸 수 있는 모드로, 모드를 변경하려면 seek( )을 호출

    3. 파일 입출력
read( ): 한 번에 파일의 모든 줄을 읽는 함수
readlines( ): 한 번에 파일의 모든 줄을 읽는 함수
readline( ): 한 번에 하나의 줄만 읽어오는 함수
write( ): 파일에 데이터 쓰기 함수
split( ): 문자열을 분리해 단어 단위로 읽어 오는 함수
