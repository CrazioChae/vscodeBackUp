    1. 다형성의 이해
 + 상속
 + 오버라이딩
 + 반복
 + 형 변환


    2. 파일 관리 및 입출력

    (1)파일 관련 클래스
 + 파일 관리 클래스
  - File
 + 파일 입력 클래스
  - Scanner
  - BufferedReader
  - FileReader
 + 파일 출력 클래스
  - PrintWriter
  - BufferedWriter
  - FileWriter


    3. 인터페이스의 탄생 배경과 특징
클래스 vs 인터페이스
정보 관리 vs 다형성
    
    (1)인터페이스의 탄생 배경
 + 전역 상수 보관
 + 함수 원형을 통한 다형성

    (2)인터페이스의 특징
 + 멤버 상수만 존재: public, final, static
 + 원래는 abstract 멤버 함수만 존재(최근 default 멤버 함수 포함)
  - abstract: body만 있다는 뜻, 함수 원형
 + 객체를 생성할 수 없음
 *+ 다중 상속 가능
 ***+ 오버라이딩을 활용한 다형성 제공


    4. static 멤버의 필요성

    (1)static 멤버 변수
 + 필요성
  - 동일 클래스 객체간 정보 공유
  - 전 프로그램이 공유하는 정보 관리
   * 은닉성 주의
   * 상수인 경우 유용
 + 특징
  - 클래스를 기반으로 접근 가능
  - 공유 정보

    (2)static 멤버 함수
 + 필요성
  - 객체 생성 전
  - 객체 정보와 무관한 서비스
 + 특징
  - 객체를 기반으로 하지 않음
  - non-static
 

    1. 함수의 선언과 사용
재사용성과 가독성을 높이기 위해 선언함
입력과 출력을 반환 값과 매개 변수를 이용하여 주고 받음
디버깅 모드에서 F5를 사용하면 함수 안으로 디버깅 진행 가능

    2. 함수 STACK
지역 변수를 저장하는 공간
호출된 함수는 호출한 함수 STACK 위에 자리함
