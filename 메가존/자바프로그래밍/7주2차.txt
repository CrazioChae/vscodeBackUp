    1. 함수와 연산자 관리

    (1)함수와 연산자를 모아서 관리
 + 장점: 가독성 / 재사용성 / 디버깅 편의성
 + 단점: 수행 속도는 떨어짐


    2. 함수의 사용

    (1)함수 선언
 + 함수 이름 규칙은 변수 이름과 동일
반환값의_변수형 함수_이름(매개변수 목록){
    //작업
    //return 반환값
}

    (2)함수 사용
변수_이름 = 함수_이름(인수 목록)

    (3)Java 프로그램을 시작하는 main함수
 + JVM이 호출함
 + String의 배열을 매개 변수로 함
 + 반환 값은 없으며, 반환 형은 void
 + JVM이 구동 될 때 사용하는 class파일(컴파일된 파일)의
  이름과 동일한 이름을 가진 클래스 안에 선언되어야 함
 + public이라는 접근자와, static 키워드를 반드시 동반해야 함

    (4)지역 변수(local variable)
STACK


    3. 다른 함수의 지역 변수에 접근
 + 다른 함수의 지역 변수를 사용
  - 범위를 벗어나면 사용 불가
  - 접근 방식은 존재함

    (1)Call By Value와 Call by Reference
 + Call By Value
  - 기본형 매개 변수
 + Call By Reference
  - 비 기본형 매개 변수


    1. 함수의 선언과 사용
재사용성과 가독성을 높이기 위해 선언함
입력과 출력을 반환 값과 매개 변수를 이용하여 주고 받음
디버깅 모드에서 F5를 사용하면 함수 안으로 디버깅을 진행할 수 있음

    2. 함수 STACK
지역 변수를 저장하는 공간
호출된 함수는 호출 함수 STACK 위에 자리함

    3. Call By Value와 Call by Reference
인자가 매개 변수로 값을 복사하는 과정은 동일
인자가 주소 값인지가 중요함
Call By Reference를 통해 함수의 결과를 담아 낼 수 있음
기본형은 무조건 Call By Value
비 기본형은 무조건 Call By Reference