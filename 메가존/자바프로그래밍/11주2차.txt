    1. API와 SPI의 개념 이해

    (1)API와 SPI
 + API: Application Programming Interface
  - 서비스 제공
  - 함수 혹은 클래스
 + SPI: Service Provider Interface
  - 서비스 제공 요구
  - 함수 혹은 인터페이스

    (2)JAVA에서의 API와 SPI

    (3)인터페이스를 구현한 SPI의 예
 + java.lang.Iterable
  - 객체를 반복문에서 보다 효과적으로 사용할 수 있도록 함
 + java.io.Serializable
  - 객체 정보의 입출력을 용이하게 일렬화하는데 사용
 + java.lang.Runnable
  - 객체를 thread로 사용할 수 있게 함
 + java.lang.Comparable
  - 객체 간 비교를 클래스 개발자가 정의할 수 있도록 함


    2. 인터페이스 implements

    (1)인터페이스 implements 문법
class class_name implements Interface_name_A, Interface_name_B..{
}

    (2)인터페이스 implements와 클래스 extends
 + 인터페이스
  - 다수의 인터페이스를 extends 가능
  - 클래스 상속 불가능
  - 인터페이스 변수 선언은 모두 public final static이며 상수
   * 생략해도 컴파일러는 인터페이스에 자동으로
    public final static을 추가
  - 인터페이스 기반으로 객체 생성 불가능
   * 당연히 인터페이스는 생성자가 없음
  - 멤버 함수는 기본적으로 abstract
   * 생략하면 컴파일러가 자동으로 추가
  - 함수 본체를 가지는 멤버 함수를 가질 수 없음
   * 이 경우 default 키워드를 동반
   * JAVA API 업그레이드를 위한 조치
   * 가급적 사용하지 말것
  - implements는 상속과 유사하여 형 변환이 허용됨
   * 다형성으로 이어짐

    (3)사칙 연산 계산기 구현 예제
 + 제한 조건
  - 문자열로 산술식을 입력 받을 것
  - 합, 차, 곱, 나누기 포함


    1. API와 SPI
완성된 서비스를 제공하는 방식이 API
필요로 하는 서비스 제공 방식을 정해 놓은 것이 SPI

    2. 인터페이스 멤버
속성은 public static final만 가능
추상 멤버 함수를 기본으로 함
예외적으로 default 멤버 함수를 허용

    3. Interface Implements
인터페이스는 속성 중심이 아님
인터페이스는 상속이 아닌 implements 개념
인터페이스는 다수의 인터페이스를 implements 할 수 있음
클래스는 다수의 인터페이스를 implements 할 수 있음
인터페이스는 클래스를 extends 할 수 없음
멤버 함수 오버 라이딩을 통한 다형성을 지원

