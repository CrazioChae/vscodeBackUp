    1. 객체 지향에서의 형 변환
 + 부모 클래스와 자식 클래스
 + Is-a 관계에 집중
 + 자동 형 변환과 강제 형 변환
 *+ 생성 당시의 속성 유지


    2. 형 변환을 돕는 연산자
 + instanceof


    3. 예외 처리

    (1)JAVA에서 기본 제공하는 예외 클래스
 + Exception
  - ClassNotFoundException
  - CloneNotSupportException
  - ...
  - RuntimeException
   * ArithmeticException
   * ...

    (2)JVM이 처리하는 ERROR
 + Error
  - LinkageError
  - ...
  - VirtualMachineError
   * InternalError
   * ...

    (3)개발자가 설계하는 Exception
 + Exception 클래스의 자식 클래스여야 함
 + Exception, Error 클래스의 상위 클래스인 Throwable

    (4)Exception 객체 던지고 받기
 + Throw
  - return과 유사
  - Exception 객체를 던지면서 함수가 종료됨
  - 생성자의 경우 객체가 생성되지 않음
 + Throws
  - 함수가 Exception 객체를 던질 수 있음을 호출자에게 알림
  - 복수개의 Exception 종류를 쉼표로 구분하여 나열할 수 있음
 + try-catch
  - try 블록에서 발생한 예외는 catch 블록에서 처리됨
  - 상속 관계를 고려해야 함
   * 부모 클래스의 catch 뒤에 자식 클래스의 catch는 수행되지 않음
  - 예외 발생 유무에 상관 없이 무조건 수행해야 하는 내용은
   finally 블록에 배치


1. 클래스 간의 형 변환
Is-a 관계여서 가능
형 변환이 이루어져도 속성은 변하지 않음
instanceof 연산자로 모호한 경우를 확인하는 코드 작성 가능

    2. Exception 처리
try-catch 블록을 이용
모든 Exception 클래스는 Exception 클래스의 자식 클래스
finally는 예외 발생 여부와 관계 없이 수행할 작업으로 채움
catch 블록의 순서는 상속 관계를 고려해야 함
